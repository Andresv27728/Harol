import axios from 'axios';  
import fetch from 'node-fetch';  
  
const handler = async (msg, { conn, args, usedPrefix, command, isPrems }) => {  
  const chatId = msg.key.remoteJid;  
  const text = args.join(' ');  
  
  if (!text) {  
    return conn.sendMessage(chatId, {  
      text: `‚ú≥Ô∏è Ingresa tu pregunta\nEjemplo: *${usedPrefix + command}* ¬øqui√©n invent√≥ WhatsApp?`  
    }, { quoted: msg });  
  }  
  
  // Si es respuesta a la lista interactiva  
  if (msg.message?.listResponseMessage) {  
    const choice = msg.message.listResponseMessage.title.toLowerCase();  
    let prefijo = '';  
  
    if (choice.includes('xex')) prefijo = 'Comportate como xex: ';  
    else if (choice.includes('china')) prefijo = 'Comportate como china: ';  
    else prefijo = '';  
  
    const pregunta = msg.message.listResponseMessage.singleSelectReply.selectedRowId;  
    const preguntaOriginal = lastQuestionMap.get(chatId) || text;  
    lastQuestionMap.delete(chatId);  
  
    const nuevaPregunta = prefijo + preguntaOriginal;  
  
    await procesarPregunta(nuevaPregunta, msg, conn);  
    return;  
  }  
  
  // Guardamos la pregunta para despu√©s (cuando elijan en la lista)  
  lastQuestionMap.set(chatId, text);  
  
  // Enviamos la lista interactiva  
  const sections = [{  
    title: 'Elige a qui√©n quieres preguntarle:',  
    rows: [  
      { title: 'Xex', rowId: 'xex' },  
      { title: 'China', rowId: 'china' }  
    ]  
  }];  
  
  const listMessage = {  
    text: '¬øA qui√©n quieres decirle?',  
    footer: 'By MaycolAI',  
    title: 'ü§ñ Elecci√≥n de IA',  
    buttonText: 'Elegir IA',  
    sections  
  };  
  
  await conn.sendMessage(chatId, listMessage, { quoted: msg });  
};  
  
const lastQuestionMap = new Map();  
  
async function procesarPregunta(text, msg, conn) {  
  const chatId = msg.key.remoteJid;  
  
  try {  
    await conn.sendMessage(chatId, { react: { text: 'üï≥Ô∏è', key: msg.key } });  
  
    const name = msg.pushName || 'Usuario';  
    const prompt = await getPrompt();  
    let result = '';  
  
    try {  
      result = await luminaiQuery(text, name, prompt);  
      result = cleanResponse(result);  
    } catch (e) {  
      console.error('Error Luminai:', e);  
      try {  
        result = await perplexityQuery(text, prompt);  
      } catch (e) {  
        console.error('Error Perplexity:', e);  
        throw new Error('No se obtuvo respuesta de los servicios');  
      }  
    }  
  
    const responseMsg = `${result}`;  
  
    await conn.sendMessage(chatId, {  
      text: responseMsg  
    }, { quoted: msg });  
  
    await conn.sendMessage(chatId, { react: { text: 'üí©', key: msg.key } });  
  
  } catch (error) {  
    console.error(error);  
    await conn.sendMessage(chatId, {  
      text: `‚ùå Error: ${error.message}`  
    }, { quoted: msg });  
  
    await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } });  
  }  
}  
  
async function getPrompt() {  
  try {  
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');  
    return await res.text();  
  } catch {  
    return 'Eres un asistente inteligente';  
  }  
}  
  
function cleanResponse(text) {  
  if (!text) return '';  
  return text  
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')  
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')  
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')  
    .trim();  
}  
  
async function luminaiQuery(q, user, prompt) {  
  const { data } = await axios.post('https://luminai.my.id', {  
    content: q,  
    user: user,  
    prompt: prompt,  
    webSearchMode: true  
  });  
  return data.result;  
}  
  
async function perplexityQuery(q, prompt) {  
  const { data } = await axios.get('https://api.perplexity.ai/chat', {  
    params: {  
      query: q,  
      context: prompt  
    }  
  });  
  return data.response;  
}  
  
handler.help = ['luminai <pregunta>'];  
handler.command = ['xex', 'ai', 'ask'];  
handler.tags = ['ai'];  
handler.register = true;  
  
export default handler;
