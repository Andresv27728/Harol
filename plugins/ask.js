import axios from 'axios';
import fetch from 'node-fetch';

const pendingQueries = new Map(); // Para guardar preguntas a resolver tras elegir bot√≥n

const handler = async (msg, { conn, args, usedPrefix, command, isButton }) => {
  const chatId = msg.key.remoteJid;
  const userId = msg.sender;
  
  // Caso: respuesta al bot√≥n
  if (isButton) {
    // Aqu√≠ 'msg.selectedButtonId' es el id del bot√≥n que presion√≥ el usuario
    const selected = msg.selectedButtonId;
    const originalQuestion = pendingQueries.get(userId);
    if (!originalQuestion) {
      return conn.sendMessage(chatId, { text: 'No tengo ninguna pregunta pendiente, escribe tu pregunta primero.' }, { quoted: msg });
    }
    pendingQueries.delete(userId);

    let prefix = '';
    if (selected === 'xex') prefix = 'Comportate como xex: ';
    else if (selected === 'china') prefix = 'Comportate como china: ';
    else prefix = '';

    // Ejecutar la consulta con el prefijo
    const finalQuery = prefix + originalQuestion;
    await processQuery(finalQuery, msg, conn);
    return;
  }

  // Caso: usuario escribe el comando con pregunta
  const text = args.join(' ');
  if (!text) {
    return conn.sendMessage(chatId, {
      text: `‚ú≥Ô∏è Ingresa tu pregunta\nEjemplo: *${usedPrefix + command}* ¬øqui√©n invent√≥ WhatsApp?`
    }, { quoted: msg });
  }

  // Guardamos la pregunta para cuando el usuario elija el bot√≥n
  pendingQueries.set(userId, text);

  // Enviar mensaje con botones para elegir entre Xex o China
  const textoBotones = `¬øCon qui√©n quieres hablar? Escoge una opci√≥n:`;
  const botones = [
    { buttonId: 'xex', buttonText: { displayText: 'Xex' }, type: 1 },
    { buttonId: 'china', buttonText: { displayText: 'China' }, type: 1 },
  ];

  const mensaje = {
    text: textoBotones,
    footer: 'By MaycolAI ü§ñ‚ù§',
    buttons: botones,
    headerType: 1
  };

  await conn.sendMessage(chatId, mensaje, { quoted: msg });
};

// Funci√≥n para procesar la consulta a las APIs
async function processQuery(query, msg, conn) {
  const chatId = msg.key.remoteJid;
  try {
    await conn.sendMessage(chatId, { react: { text: 'üï≥Ô∏è', key: msg.key } });

    const name = msg.pushName || 'Usuario';
    const prompt = await getPrompt();
    let result = '';

    try {
      result = await luminaiQuery(query, name, prompt);
      result = cleanResponse(result);
    } catch (e) {
      console.error('Error Luminai:', e);
      try {
        result = await perplexityQuery(query, prompt);
      } catch (e) {
        console.error('Error Perplexity:', e);
        throw new Error('No se obtuvo respuesta de los servicios');
      }
    }

    await conn.sendMessage(chatId, { text: result }, { quoted: msg });
    await conn.sendMessage(chatId, { react: { text: 'üí©', key: msg.key } });

  } catch (error) {
    console.error(error);
    await conn.sendMessage(chatId, {
      text: `‚ùå Error: ${error.message}`
    }, { quoted: msg });

    await conn.sendMessage(chatId, { react: { text: '‚ùå', key: msg.key } });
  }
}

async function getPrompt() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/elrebelde21/LoliBot-MD/main/src/text-chatgpt.txt');
    return await res.text();
  } catch {
    return 'Eres un asistente inteligente';
  }
}

function cleanResponse(text) {
  if (!text) return '';
  return text
    .replace(/Maaf, terjadi kesalahan saat memproses permintaan Anda/g, '')
    .replace(/Generated by BLACKBOX\.AI.*?https:\/\/www\.blackbox\.ai/g, '')
    .replace(/and for API requests replace https:\/\/www\.blackbox\.ai with https:\/\/api\.blackbox\.ai/g, '')
    .trim();
}

async function luminaiQuery(q, user, prompt) {
  const { data } = await axios.post('https://luminai.my.id', {
    content: q,
    user: user,
    prompt: prompt,
    webSearchMode: true
  });
  return data.result;
}

async function perplexityQuery(q, prompt) {
  const { data } = await axios.get('https://api.perplexity.ai/chat', {
    params: {
      query: q,
      context: prompt
    }
  });
  return data.response;
}

handler.help = ['xex <pregunta>'];
handler.command = ['xex', 'ai', 'ask'];
handler.tags = ['ai'];
handler.register = true;
handler.channel = true;

export default handler;
